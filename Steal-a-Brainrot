local q=loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
wait(1)

local a=game.Players.LocalPlayer
local b=game:GetService("RunService")
local c=false
local d=nil
local e=false
local f=nil
local g=false
local h=nil
local i=false
local j=nil
local k=false
local l=false
local m=false
local n=false
local o=nil
local p=15
local r=false
local s=false
local t=false
local u=false
local v=""
local w=nil
local x=false
local y=nil
local z=nil

local A=q:CreateWindow({
   Name = "Fifi Hub",
   Logo = "rbxassetid://117153131200364",
   KeySystem = false
})

local B=A:CreateTab("Principal", 4483362458)
local C=A:CreateTab("Visual", 4483362458)
local D=A:CreateTab("Misc", 4483362458)
local E=A:CreateTab("Sobre", 4483362458)

E:CreateParagraph({
    Title = "Sobre",
    Content = "Este script foi feito para entretenimento. Discord: https://discord.gg/P2meU378"
})

task.spawn(function()
    repeat wait() until game:GetService("CoreGui"):FindFirstChild("Rayfield")
    local F = game:GetService("CoreGui"):FindFirstChild("Rayfield")
    if F then
        local function G()
            for _, H in ipairs(F:GetDescendants()) do
                if H:IsA("TextLabel") and typeof(H.Text) == "string" and H.Text:lower():find("interface suite") then
                    H.Text = "Script by ValadasPt"
                end
            end
        end
        G()
        F.DescendantAdded:Connect(function(I)
            if I:IsA("TextLabel") and typeof(I.Text) == "string" and I.Text:lower():find("interface suite") then
                I.Text = "Script by ValadasPt"
            end
        end)
    end
end)

-- ================== MISC ==================
D:CreateToggle({
    Name = "Spin Bot",
    Info = "Faz seu personagem girar rapidamente",
    CurrentValue = false,
    Flag = "ToggleSpinBot",
    Callback = function(J)
        x = J
        if x then
            if not y then
                y = b.Heartbeat:Connect(function()
                    if a.Character and a.Character:FindFirstChild("HumanoidRootPart") then
                        a.Character.HumanoidRootPart.CFrame = a.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(60), 0)
                    end
                end)
            end
        else
            if y then
                y:Disconnect()
                y = nil
            end
        end
    end
})

D:CreateButton({
    Name = "Encontrar Servidor Rico",
    Info = "Troca de servidor",
    Interact = 'Click',
    Callback = function()
        local K = game.PlaceId
        local L = {}
        local M = ""
        local N = os.date("!*t").hour
        local O = pcall(function()
            L = game:GetService('HttpService'):JSONDecode(readfile("NotSameServers.json"))
        end)
        if not O then
            table.insert(L, N)
            writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(L))
        end
        function P()
            local Q
            if M == "" then
                Q = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. K .. '/servers/Public?sortOrder=Asc&limit=100'))
            else
                Q = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. K .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. M))
            end
            local R = ""
            if Q.nextPageCursor and Q.nextPageCursor ~= "null" and Q.nextPageCursor ~= nil then
                M = Q.nextPageCursor
            end
            local S = 0
            for _, T in pairs(Q.data) do
                local U = true
                R = tostring(T.id)
                if tonumber(T.maxPlayers) > tonumber(T.playing) then
                    for _, V in pairs(L) do
                        if S ~= 0 then
                            if R == tostring(V) then U = false end
                        else
                            if tonumber(N) ~= tonumber(V) then
                                pcall(function()
                                    delfile("NotSameServers.json")
                                    L = {}
                                    table.insert(L, N)
                                end)
                            end
                        end
                        S = S + 1
                    end
                    if U == true then
                        table.insert(L, R)
                        wait()
                        pcall(function()
                            writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(L))
                            wait()
                            game:GetService("TeleportService"):TeleportToPlaceInstance(K, R, game.Players.LocalPlayer)
                        end)
                        wait(4)
                    end
                end
            end
        end
        function W()
            while wait() do
                pcall(function()
                    P()
                    if M ~= "" then P() end
                end)
            end
        end
        W()
    end
})

-- ========== PRINCIPAL ==========
B:CreateButton({
    Name = "Setar Local",
    Info = "Salva sua posição atual para retornar depois",
    Interact = 'Click',
    Callback = function()
        if a.Character and a.Character:FindFirstChild("HumanoidRootPart") then
            o = a.Character.HumanoidRootPart.Position
            q:Notify({
                Title = "Local setado!",
                Content = "A posição foi salva.",
                Duration = 3,
                Actions = {}
            })
        else
            q:Notify({
                Title = "Erro",
                Content = "Não foi possível salvar a posição.",
                Duration = 3,
                Actions = {}
            })
        end
    end
})

B:CreateButton({
    Name = "Voltar",
    Info = "Vai até o local salvo anteriormente (não atravessa paredes)",
    Interact = 'Click',
    Callback = function()
        if o and a.Character and a.Character:FindFirstChild("HumanoidRootPart") then
            n = true
            if j then
                j:Disconnect()
                j = nil
            end
            for _, X in pairs(a.Character:GetDescendants()) do
                if X:IsA("BasePart") then X.CanCollide = true end
            end
            spawn(function()
                local Y = a.Character:FindFirstChild("Humanoid")
                local Z = a.Character:FindFirstChild("HumanoidRootPart")
                while n and Z and (Z.Position - o).Magnitude > 3 do
                    local a1 = (o - Z.Position).Unit
                    Z.CFrame = CFrame.new(Z.Position + a1 * 0.5, o)
                    Z.Velocity = a1 * p
                    if Y then Y:MoveTo(o) end
                    b.Heartbeat:Wait()
                end
                if a.Character then
                    local b1 = a.Character:FindFirstChild("Humanoid")
                    if b1 then b1:ChangeState(Enum.HumanoidStateType.Landing) end
                    local c1 = a.Character:FindFirstChild("HumanoidRootPart")
                    if c1 then c1.Velocity = Vector3.new(0,0,0) end
                end
                n = false
            end)
        else
            q:Notify({
                Title = "Nenhum local salvo!",
                Content = "Use 'Setar Local' antes.",
                Duration = 3,
                Actions = {}
            })
        end
    end
})

B:CreateSlider({
    Name = "Velocidade de Voltar",
    Range = {1, 100},
    Increment = 1,
    Suffix = "Velocidade",
    CurrentValue = p,
    Flag = "SliderVelocidadeVoltar",
    Callback = function(Value)
        p = Value
        q:Notify({
            Title = "Velocidade alterada!",
            Content = "Nova velocidade de voltar: " .. tostring(Value),
            Duration = 2,
            Actions = {}
        })
    end
})

B:CreateInput({
    Name = "Nome do jogador para perseguir",
    Info = "Digite o nome exato do jogador",
    PlaceholderText = "Digite aqui...",
    RemoveTextAfterFocusLost = false,
    Callback = function(Text)
        v = Text
    end
})

B:CreateButton({
    Name = "Perseguir jogador",
    Info = "Vai perseguir o jogador especificado acima",
    Interact = 'Click',
    Callback = function()
        w = nil
        for _,plr in pairs(game.Players:GetPlayers()) do
            if plr.Name:lower() == v:lower() then
                w = plr
                break
            end
        end
        if w and w.Character and w.Character:FindFirstChild("HumanoidRootPart") then
            c = true
            if not d then
                d = b.Heartbeat:Connect(function()
                    if c and w and w.Character and w.Character:FindFirstChild("HumanoidRootPart") and a.Character and a.Character:FindFirstChild("HumanoidRootPart") then
                        local playerRoot = a.Character.HumanoidRootPart
                        local targetRoot = w.Character.HumanoidRootPart
                        local targetPos = targetRoot.Position
                        local direction = (targetPos - playerRoot.Position).Unit
                        playerRoot.Velocity = direction * 25 * 2.05
                        playerRoot.CFrame = CFrame.new(playerRoot.Position, targetPos)
                        local humanoid = a.Character:FindFirstChild("Humanoid")
                        if humanoid then
                            humanoid:ChangeState(Enum.HumanoidStateType.Flying)
                        end
                    end
                end)
            end
            q:Notify({
                Title = "Perseguindo!",
                Content = "Seguindo " .. w.Name,
                Duration = 3,
                Actions = {}
            })
        else
            c = false
            if d then
                d:Disconnect()
                d = nil
            end
            q:Notify({
                Title = "Jogador não encontrado!",
                Content = "Certifique-se de digitar o nome exato.",
                Duration = 3,
                Actions = {}
            })
        end
    end
})

B:CreateButton({
    Name = "Parar Perseguir",
    Info = "Para de seguir o jogador",
    Interact = 'Click',
    Callback = function()
        c = false
        if d then
            d:Disconnect()
            d = nil
        end
        if a.Character then
            for _, part in pairs(a.Character:GetDescendants()) do
                if part:IsA("BasePart") then part.CanCollide = true end
            end
            local humanoid = a.Character:FindFirstChild("Humanoid")
            if humanoid then
                humanoid:ChangeState(Enum.HumanoidStateType.Landing)
            end
            local rootPart = a.Character:FindFirstChild("HumanoidRootPart")
            if rootPart then rootPart.Velocity = Vector3.new(0, 0, 0) end
        end
        q:Notify({
            Title = "Perseguição parada.",
            Content = "Você não está mais seguindo ninguém.",
            Duration = 3,
            Actions = {}
        })
    end
})

B:CreateToggle({
    Name = "Auto perseguir",
    Info = "Persegue automaticamente o jogador mais próximo",
    CurrentValue = false,
    Flag = "ToggleAutoPerseguir",
    Callback = function(state)
        e = state
        if e then
            if not f then
                f = b.Heartbeat:Connect(function()
                    if e and a.Character and a.Character:FindFirstChild("HumanoidRootPart") then
                        local playerRoot = a.Character.HumanoidRootPart
                        local nearestPlayer = nil
                        local shortestDistance = math.huge
                        for _, otherPlayer in pairs(game.Players:GetPlayers()) do
                            if otherPlayer ~= a and 
                               otherPlayer.Character and 
                               otherPlayer.Character:FindFirstChild("HumanoidRootPart") and
                               otherPlayer.Character:FindFirstChild("Humanoid") and
                               otherPlayer.Character.Humanoid.Health > 0 then
                                local distance = (otherPlayer.Character.HumanoidRootPart.Position - playerRoot.Position).Magnitude
                                if distance < shortestDistance then
                                    shortestDistance = distance
                                    nearestPlayer = otherPlayer
                                end
                            end
                        end
                        if nearestPlayer and nearestPlayer.Character then
                            local targetRoot = nearestPlayer.Character.HumanoidRootPart
                            local targetPos = targetRoot.Position
                            local direction = (targetPos - playerRoot.Position).Unit
                            playerRoot.Velocity = direction * 25 * 2.05
                            playerRoot.CFrame = CFrame.new(playerRoot.Position, targetPos)
                            local humanoid = a.Character:FindFirstChild("Humanoid")
                            if humanoid then
                                humanoid:ChangeState(Enum.HumanoidStateType.Flying)
                            end
                        end
                    end
                end)
            end
            q:Notify({
                Title = "Auto perseguir ativado",
                Content = "Você está perseguindo automaticamente o jogador mais próximo.",
                Duration = 3,
                Actions = {}
            })
        else
            if f then
                f:Disconnect()
                f = nil
            end
            if a.Character then
                for _, part in pairs(a.Character:GetDescendants()) do
                    if part:IsA("BasePart") then part.CanCollide = true end
                end
                local humanoid = a.Character:FindFirstChild("Humanoid")
                if humanoid then
                    humanoid:ChangeState(Enum.HumanoidStateType.Landing)
                end
                local rootPart = a.Character:FindFirstChild("HumanoidRootPart")
                if rootPart then rootPart.Velocity = Vector3.new(0, 0, 0) end
            end
            q:Notify({
                Title = "Auto perseguir desativado",
                Content = "Você não está mais perseguindo automaticamente ninguém.",
                Duration = 3,
                Actions = {}
            })
        end
    end
})

B:CreateToggle({
    Name = "Godmod",
    Info = "Deixa o player imortal",
    CurrentValue = false,
    Flag = "ToggleGodmod",
    Callback = function(state)
        g = state
        local function setGodmode()
            if a.Character and a.Character:FindFirstChild("Humanoid") then
                local humanoid = a.Character.Humanoid
                humanoid.Health = humanoid.MaxHealth
                humanoid:GetPropertyChangedSignal("Health"):Connect(function()
                    if g then
                        humanoid.Health = humanoid.MaxHealth
                    end
                end)
                humanoid:GetPropertyChangedSignal("Parent"):Connect(function()
                    if g and humanoid.Parent == nil then
                        a.CharacterAdded:Wait()
                        setGodmode()
                    end
                end)
            end
        end
        if g then
            setGodmode()
            if not h then
                h = a.CharacterAdded:Connect(function()
                    wait(0.2)
                    setGodmode()
                end)
            end
        else
            if h then
                h:Disconnect()
                h = nil
            end
        end
    end
})

B:CreateToggle({
    Name = "Noclip",
    Info = "Atravessa paredes",
    CurrentValue = false,
    Flag = "ToggleNoclip",
    Callback = function(state)
        l = state
        if l then
            if not j then
                j = b.Stepped:Connect(function()
                    if a.Character then
                        for _, part in pairs(a.Character:GetDescendants()) do
                            if part:IsA("BasePart") then part.CanCollide = false end
                        end
                    end
                end)
            end
        else
            if j then
                j:Disconnect()
                j = nil
            end
            if a.Character then
                for _, part in pairs(a.Character:GetDescendants()) do
                    if part:IsA("BasePart") then part.CanCollide = true end
                end
            end
        end
    end
})

-- INFINITY JUMP
B:CreateToggle({
    Name = "Infinity Jump",
    Info = "Permite pular no ar infinitamente",
    CurrentValue = false,
    Flag = "ToggleInfinityJump",
    Callback = function(state)
        m = state
        if m then
            if not z then
                z = game:GetService("UserInputService").JumpRequest:Connect(function()
                    if m and a.Character and a.Character:FindFirstChildOfClass("Humanoid") then
                        local humanoid = a.Character:FindFirstChildOfClass("Humanoid")
                        if humanoid then humanoid:ChangeState(Enum.HumanoidStateType.Jumping) end
                    end
                end)
            end
            q:Notify({
                Title = "Infinity Jump ativado!",
                Content = "Agora você pode pular infinitamente.",
                Duration = 3,
                Actions = {}
            })
        else
            if z then
                z:Disconnect()
                z = nil
            end
            q:Notify({
                Title = "Infinity Jump desativado.",
                Content = "Você voltou ao pulo normal.",
                Duration = 3,
                Actions = {}
            })
        end
    end
})

B:CreateToggle({
    Name = "SHIFTLOCK",
    Info = "Trava a câmera",
    CurrentValue = false,
    Flag = "ToggleShiftlock",
    Callback = function(state)
        r = state
        if a.Character then
            local isMobile = game:GetService("UserInputService").TouchEnabled
            if r then
                game.Players.LocalPlayer.DevEnableMouseLock = true
                if isMobile then
                    local character = a.Character
                    if character then
                        local humanoid = character:FindFirstChild("Humanoid")
                        if humanoid then
                            workspace.CurrentCamera.CameraType = Enum.CameraType.Custom
                            game:GetService("RunService"):BindToRenderStep("ShiftLockUpdate", Enum.RenderPriority.Camera.Value + 1, function()
                                if r and character:FindFirstChild("HumanoidRootPart") then
                                    local rootPart = character.HumanoidRootPart
                                    local camera = workspace.CurrentCamera
                                    local cameraLook = camera.CFrame.LookVector
                                    local flatLook = Vector3.new(cameraLook.X, 0, cameraLook.Z).Unit
                                    rootPart.CFrame = CFrame.new(rootPart.Position, rootPart.Position + flatLook)
                                end
                            end)
                            humanoid.AutoRotate = false
                            if not _G.ZoomConnection then
                                _G.ZoomConnection = game:GetService("UserInputService").TouchPinch:Connect(function(scale, velocity, state)
                                    if humanoid then
                                        humanoid.CameraOffset = Vector3.new(2, 0.5, 0)
                                    end
                                end)
                            end
                        end
                    end
                end
            else
                game.Players.LocalPlayer.DevEnableMouseLock = false
                if isMobile then
                    local character = a.Character
                    if character then
                        local humanoid = character:FindFirstChild("Humanoid")
                        if humanoid then
                            humanoid.CameraOffset = Vector3.new(0, 0, 0)
                            humanoid.AutoRotate = true
                            workspace.CurrentCamera.CameraType = Enum.CameraType.Custom
                            game:GetService("RunService"):UnbindFromRenderStep("ShiftLockUpdate")
                            if _G.ZoomConnection then
                                _G.ZoomConnection:Disconnect()
                                _G.ZoomConnection = nil
                            end
                        end
                    end
                end
            end
        end
    end
})

C:CreateToggle({
    Name = "ESP",
    Info = "Veja outros jogadores",
    CurrentValue = false,
    Flag = "ToggleESP",
    Callback = function(state)
        s = state
        for _, esp in pairs(game:GetService("CoreGui"):GetChildren()) do
            if esp.Name == "ESP_Box" then esp:Destroy() end
        end
        if s then
            local function addESP(player)
                for _, existingEsp in pairs(game:GetService("CoreGui"):GetChildren()) do
                    if existingEsp.Name == "ESP_Box" and existingEsp:FindFirstChild("PlayerName") and existingEsp.PlayerName.Value == player.Name then
                        return
                    end
                end
                local function createESPForCharacter(character)
                    if character and character:FindFirstChild("HumanoidRootPart") then
                        local billboardGui = Instance.new("BillboardGui")
                        billboardGui.Name = "ESP_Box"
                        billboardGui.AlwaysOnTop = true
                        billboardGui.Size = UDim2.new(4, 0, 5, 0)
                        billboardGui.StudsOffset = Vector3.new(0, 0, 0)
                        billboardGui.Parent = game:GetService("CoreGui")
                        billboardGui.Adornee = character:FindFirstChild("HumanoidRootPart")
                        local playerName = Instance.new("StringValue")
                        playerName.Name = "PlayerName"
                        playerName.Value = player.Name
                        playerName.Parent = billboardGui
                        local frame = Instance.new("Frame")
                        frame.Size = UDim2.new(1, 0, 1, 0)
                        frame.BackgroundTransparency = 0.2
                        frame.BorderSizePixel = 4
                        frame.BorderColor3 = Color3.fromRGB(128, 0, 255)
                        frame.BackgroundColor3 = Color3.fromRGB(128, 0, 255)
                        frame.Parent = billboardGui
                        local gradient = Instance.new("UIGradient")
                        gradient.Color = ColorSequence.new({
                            ColorSequenceKeypoint.new(0, Color3.fromRGB(128,0,255)),
                            ColorSequenceKeypoint.new(0.5, Color3.fromRGB(180,0,255)),
                            ColorSequenceKeypoint.new(1, Color3.fromRGB(128,0,255))
                        })
                        gradient.Parent = frame
                        local updateConnection = game:GetService("RunService").RenderStepped:Connect(function()
                            if not s or not character:IsDescendantOf(game) then
                                updateConnection:Disconnect()
                                billboardGui:Destroy()
                                return
                            end
                            if character and character:FindFirstChild("HumanoidRootPart") and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                                billboardGui.Size = UDim2.new(4, 0, 5, 0)
                                billboardGui.StudsOffset = Vector3.new(0, 0, 0)
                            end
                        end)
                    end
                end
                if player.Character then createESPForCharacter(player.Character) end
                player.CharacterAdded:Connect(function(character)
                    if s then
                        for _, existingEsp in pairs(game:GetService("CoreGui"):GetChildren()) do
                            if existingEsp.Name == "ESP_Box" and existingEsp:FindFirstChild("PlayerName") and existingEsp.PlayerName.Value == player.Name then
                                existingEsp:Destroy()
                            end
                        end
                        createESPForCharacter(character)
                    end
                end)
            end
            for _, plr in pairs(game.Players:GetPlayers()) do
                if plr ~= game.Players.LocalPlayer then
                    addESP(plr)
                end
            end
            local playerAddedConnection
            playerAddedConnection = game.Players.PlayerAdded:Connect(function(plr)
                if s and plr ~= game.Players.LocalPlayer then
                    addESP(plr)
                end
            end)
            local function cleanupConnections()
                if playerAddedConnection then
                    playerAddedConnection:Disconnect()
                    playerAddedConnection = nil
                end
            end
            if not state then
                cleanupConnections()
            end
        end
    end
})
